@implements IDisposable
@using BlazorServerSideRealWorld.Models;
@using BlazorServerSideRealWorld.Services;
@inject NavigationManager navigationManager
@inject StateService state
@inject UserService userApi

<nav class="navbar navbar-light">
    <div class="container">
        <NavLink class="navbar-brand" href="/" Match=NavLinkMatch.All>conduit</NavLink>
        <ul class="nav navbar-nav pull-xs-right">
            <li class="nav-item">
                <NavLink class="nav-link" href="/" Match=NavLinkMatch.All>
                    Home
                </NavLink>
            </li>
            @if (state.IsSignedIn)
            {
                var username = user?.Username;
                var image = user?.Image;

                <li class="nav-item">
                    <NavLink class="nav-link" href="/editor">
                        <i class="ion-compose"></i>&nbsp;New Post
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/settings">
                        <i class="ion-gear-a"></i>&nbsp;Settings
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href=@("/profile/" + username)>
                        <img src="@image" class="user-pic" />
                        @username
                    </NavLink>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/" @onclick="SignOut">
                        Sign out
                    </a>
                </li>
            }
            else
            {
                <li class="nav-item">
                    <NavLink class="nav-link" href="/signin">
                        Sign in
                    </NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/signup">
                        Sign up
                    </NavLink>
                </li>
            }
        </ul>
    </div>
</nav>

@functions {

    UserModel user = new UserModel();

    protected override void OnInitialized()
    {
        user = state.User;
        state.OnUserChange += Update;
        base.OnInitialized();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await userApi.PopulateAsync();
        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose()
    {
        state.OnUserChange -= Update;
    }

    private void Update()
    {
        user = state.User;
        StateHasChanged();
    }

    public async Task SignOut()
    {
        await userApi.SignOutAsync();
        navigationManager.NavigateTo("/");
    }
}