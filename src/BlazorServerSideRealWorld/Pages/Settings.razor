@page "/settings"
@implements IDisposable
@using System
@using BlazorServerSideRealWorld.Models
@using BlazorServerSideRealWorld.Services
@inject StateService state
@inject UserService userApi
@inject IUriHelper uriHelper

<div class="settings-page">
    <div class="container page">
        <div class="row">
            <div class="col-md-6 offset-md-3 col-xs-12">
                <h1 class="text-xs-center">Your Settings</h1>
                <ErrorMessages Errors=@errors />
                <form>
                    <fieldset>
                        <fieldset class="form-group">
                            <input class="form-control" type="text" placeholder="URL of profile picture" bind="@(userModel.Image)" />
                        </fieldset>
                        <fieldset class="form-group">
                            <input class="form-control form-control-lg" type="text" placeholder="Your Name" bind="@(userModel.Username)" />
                        </fieldset>
                        <fieldset class="form-group">
                            <textarea class="form-control form-control-lg" rows="8" placeholder="Short bio about you" bind="@(userModel.Bio)">@userModel.Bio</textarea>
                        </fieldset>
                        <fieldset class="form-group">
                            <input class="form-control form-control-lg" type="email" placeholder="Email" bind="@(userModel.Email)" />
                        </fieldset>
                        <fieldset class="form-group">
                            <input class="form-control form-control-lg" type="password" placeholder="Password" bind="@(userCredentials.Password)" />
                        </fieldset>
                        <button class="btn btn-lg btn-primary pull-xs-right" type="button" onclick="@Submit">
                            Update Settings
                        </button>
                    </fieldset>
                </form>
            </div>
        </div>
    </div>
</div>

@functions
{
    UserModel userModel = new UserModel();
    UserCredentials userCredentials = new UserCredentials();
    ErrorsModel errors = new ErrorsModel();

    protected override void OnInit()
    {
        state.OnUserChange += UserHasLoaded;
        UserHasLoaded();
    }

    public void Dispose()
    {
        state.OnUserChange -= UserHasLoaded;
    }

    void UserHasLoaded()
    {
        userModel = state.User?.Clone() ?? new UserModel();
        StateHasChanged();
    }

    async Task Submit()
    {
        var response = await userApi.UpdateAsync(userModel);

        if (response != null && response.HasSuccessStatusCode)
        {
            state.UpdateUser(response.Value?.User);
            uriHelper.NavigateTo("/");
        }
        else
        {
            errors = response?.Errors ?? new ErrorsModel();
        }
    }
}
