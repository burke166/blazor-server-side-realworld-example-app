@page "/settings"
@implements IDisposable
@using System
@using Microsoft.AspNetCore.Components.Services
@using RazorComponentsRealworld
@using RazorComponentsRealworld.Model
@inject AppState state
@inject ApiClient api
@inject IUriHelper uriHelper

<div class="settings-page">
    <div class="container page">
        <div class="row">
            <div class="col-md-6 offset-md-3 col-xs-12">
                <h1 class="text-xs-center">Your Settings</h1>
                <ErrorMessages Errors=@response.errors />
                <form>
                    <fieldset>
                        <fieldset class="form-group">
                            <input class="form-control" type="text" placeholder="URL of profile picture" bind="@(userModel.Image)" />
                        </fieldset>
                        <fieldset class="form-group">
                            <input class="form-control form-control-lg" type="text" placeholder="Your Name" bind="@(userModel.Username)" />
                        </fieldset>
                        <fieldset class="form-group">
                            <textarea class="form-control form-control-lg" rows="8" placeholder="Short bio about you" bind="@(userModel.Bio)">@userModel.Bio</textarea>
                        </fieldset>
                        <fieldset class="form-group">
                            <input class="form-control form-control-lg" type="email" placeholder="Email" bind="@(userModel.Email)" />
                        </fieldset>
                        <fieldset class="form-group">
                            <input class="form-control form-control-lg" type="password" placeholder="Password" bind="@(userCredentials.Password)" />
                        </fieldset>
                        <button class="btn btn-lg btn-primary pull-xs-right" onclick="@Submit">
                            Update Settings
                        </button>
                    </fieldset>
                </form>
            </div>
        </div>
    </div>
</div>

@functions
{
    UserModel userModel = new UserModel();
    UserCredentials userCredentials = new UserCredentials();
    UserResponse response = new UserResponse();

    protected override void OnInit()
    {
        state.OnUserChange += UserHasLoaded;
    }

    public void Dispose()
    {
        state.OnUserChange -= UserHasLoaded;
    }

    void UserHasLoaded()
    {
        userModel = state.User.Clone();
        StateHasChanged();
    }

    async Task Submit()
    {
        response = await api.UpdateUserAsync(userModel);

        if (response.user != null)
        {
            state.UpdateUser(response.user);
            uriHelper.NavigateTo("/");
        }
        else
            // Show errors
            StateHasChanged();
    }
}
